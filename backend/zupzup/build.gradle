plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.diffplug.spotless' version '6.11.0'
}

group = 'com.twoez'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // annotation processor
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    testImplementation 'org.springframework.security:spring-security-test'

    // spring cloud open feign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.3'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // jdbc
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    runtimeOnly 'com.h2database:h2'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // querydsl
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // spring rest docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // rest assured
    testImplementation 'io.rest-assured:rest-assured'
    implementation 'com.google.guava:guava:32.1.2-jre'

    // prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // mongodb
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb:3.1.5'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.projectlombok:lombok'

    // actuator
    implementation "org.springframework.boot:spring-boot-starter-actuator"

    // eh cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.ehcache:ehcache:3.10.6'

    // JSR-107
    implementation 'javax.cache:cache-api:1.1.1'

    // jaxb(binding xml to java beans)
    implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.1'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'org.javassist:javassist:3.25.0-GA'

    // Spring AOP
    implementation 'org.springframework.boot:spring-boot-starter-aop'

}

tasks.named('test') {
    useJUnitPlatform()
}


// Querydsl Settings
def querydslDir = layout.buildDirectory.dir("/generated/querydsl")

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory.file(querydslDir)
}

clean.doLast {
    file(querydslDir).deleteDir()
}

// rest docs Settings
ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springCloudVersion', "2022.0.3")
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/templates')
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'BOOT-INF/classes/static/docs'
    }
    finalizedBy('copyDocument')
}

tasks.register('copyDocument', Copy) {
    from file("build/docs/asciidoc")
    into file("src/main/resources/templates")
}

// spotless
spotless {
    java {
        target("**/*.java")
        googleJavaFormat().aosp()
        indentWithSpaces(4)
        importOrder()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

spotlessJava.dependsOn copyDocument

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}